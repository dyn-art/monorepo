use std::ops::Deref;

use bevy_hierarchy::Children;
use dyn_composition::core::modules::node::components::mixins::{
    BlendMixin, ChildrenMixin, DimensionMixin, NodeCompositionMixin, PathMixin,
    RectangleCornerMixin, RelativeTransformMixin,
};
use serde::Serialize;
use specta::Type;

#[derive(Serialize, Clone, Debug, Type)]
#[serde(tag = "type")]
pub enum MixinChange {
    RectangleCorner(RectangleCornerMixin),
    Children(RenderChangeChildrenMixin),
    Dimension(DimensionMixin),
    RelativeTransform(RenderChangeRelativeTransformMixin),
    Composition(NodeCompositionMixin),
    Blend(BlendMixin),
    Path(PathMixin),
}

pub trait ToMixinChange {
    fn to_mixin_change(&self) -> MixinChange;
}

// Separates ChildrenMixin into a struct due to a type conflict generated by specta & serde.
// In Rust, ChildrenMixin is a Vec<Entity>, but in TypeScript, it's Entity[] which
// cannot merge with an object type like ({type: 'Children'} & ChildrenMixin) without conflict.
#[derive(Serialize, Clone, Debug, Type)]
pub struct RenderChangeChildrenMixin {
    children: ChildrenMixin,
}

impl ToMixinChange for Children {
    fn to_mixin_change(&self) -> MixinChange {
        MixinChange::Children(RenderChangeChildrenMixin {
            children: ChildrenMixin(self.deref().to_vec()),
        })
    }
}

impl ToMixinChange for DimensionMixin {
    fn to_mixin_change(&self) -> MixinChange {
        MixinChange::Dimension(self.clone())
    }
}

#[derive(Serialize, Clone, Debug, Type)]
pub struct RenderChangeRelativeTransformMixin {
    #[serde(rename = "relativeTransform")]
    relative_transform: RelativeTransformMixin,
}

impl ToMixinChange for RelativeTransformMixin {
    fn to_mixin_change(&self) -> MixinChange {
        MixinChange::RelativeTransform(RenderChangeRelativeTransformMixin {
            relative_transform: self.clone(),
        })
    }
}

impl ToMixinChange for NodeCompositionMixin {
    fn to_mixin_change(&self) -> MixinChange {
        MixinChange::Composition(self.clone())
    }
}

impl ToMixinChange for BlendMixin {
    fn to_mixin_change(&self) -> MixinChange {
        MixinChange::Blend(self.clone())
    }
}

impl ToMixinChange for PathMixin {
    fn to_mixin_change(&self) -> MixinChange {
        MixinChange::Path(self.clone())
    }
}

impl ToMixinChange for RectangleCornerMixin {
    fn to_mixin_change(&self) -> MixinChange {
        MixinChange::RectangleCorner(self.clone())
    }
}
