/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/render": {
    post: operations["render_composition"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Abs: components["schemas"]["Scalar"];
    AbsoluteLayoutElement: {
      constraints: components["schemas"]["Constraints"];
    };
    /**
     * @description Sets the distribution of space between and around content items
     * For Flexbox it controls alignment in the cross axis
     * For Grid it controls alignment in the block axis
     *
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)
     * @enum {string}
     */
    AlignContent: "Start" | "End" | "FlexStart" | "FlexEnd" | "Center" | "Stretch" | "SpaceBetween" | "SpaceEvenly" | "SpaceAround";
    /**
     * @description Used to control how child nodes are aligned.
     * For Flexbox it controls alignment in the cross axis
     * For Grid it controls alignment in the block axis
     *
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)
     * @enum {string}
     */
    AlignItems: "Start" | "End" | "FlexStart" | "FlexEnd" | "Center" | "Baseline" | "Stretch";
    Angle: components["schemas"]["Scalar"];
    AppError: {
      /** @description An array of additional error details or nested errors that occurred during the process. */
      additionalErrors?: {
          [key: string]: unknown;
        }[];
      code: components["schemas"]["ErrorCode"];
      /**
       * @description A detailed, human-readable description of the error. Provides additional context
       * and, if applicable, steps to resolve the issue.
       */
      description?: string | null;
      /**
       * Format: int32
       * @description HTTP status code associated with the error, indicating the nature of the failure.
       */
      status: number;
      /** @description An optional URI linking to a document or resource with more information about the error. */
      uri?: string | null;
    };
    Asset: {
      content: components["schemas"]["AssetContent"];
      contentType: components["schemas"]["AssetContentType"];
    };
    AssetContent: {
      /** Format: binary */
      content: string;
      /** @enum {string} */
      type: "Binary";
    } | {
      /** @enum {string} */
      type: "Url";
      url: string;
    };
    AssetContentType: {
      /** @enum {string} */
      type: "Unknown";
    } | {
      /** @enum {string} */
      type: "Jpeg";
    } | {
      /** @enum {string} */
      type: "Png";
    } | {
      /** Format: int32 */
      height: number;
      /** @enum {string} */
      type: "Svg";
      /** Format: int32 */
      width: number;
    } | {
      /** @enum {string} */
      type: "Ttf";
    };
    AssetWithId: {
      content: components["schemas"]["AssetContent"];
      contentType: components["schemas"]["AssetContentType"];
      id?: components["schemas"]["ReferenceId"] | null;
    };
    AutoLength: {
      /** @enum {string} */
      type: "Abs";
      value: components["schemas"]["Abs"];
    } | {
      /** @enum {string} */
      type: "Ratio";
      value: components["schemas"]["Ratio"];
    } | {
      /** @enum {string} */
      type: "Auto";
    };
    Axes: {
      /** Format: float */
      x: number;
      /** Format: float */
      y: number;
    };
    /** @enum {string} */
    BlendMode: "Normal" | "Multiply" | "Screen" | "Overlay" | "Darken" | "Lighten" | "ColorDodge" | "ColorBurn" | "HardLight" | "SoftLight" | "Difference" | "Exclusion" | "Hue" | "Saturation" | "Color" | "Luminosity";
    Color: number[];
    /** @enum {string} */
    CompVersion: "V000001";
    /** @enum {string} */
    Constraint: "Start" | "Center" | "End" | "Stretch" | "Scale";
    Constraints: {
      horizontal: components["schemas"]["Constraint"];
      vertical: components["schemas"]["Constraint"];
    };
    CoreInputEvent: (components["schemas"]["UpdateCompositionSizeInputEvent"] & {
      /** @enum {string} */
      type: "UpdateCompositionSize";
    }) | (components["schemas"]["UpdateCompositionViewportInputEvent"] & {
      /** @enum {string} */
      type: "UpdateCompositionViewport";
    }) | (components["schemas"]["FocusRootNodesInputEvent"] & {
      /** @enum {string} */
      type: "FocusRootNodes";
    }) | (components["schemas"]["CreateNodeInputEvent"] & {
      /** @enum {string} */
      type: "CreateNode";
    }) | (components["schemas"]["UpdateFrameNodeInputEvent"] & {
      /** @enum {string} */
      type: "UpdateFrameNode";
    }) | (components["schemas"]["UpdateEllipseNodeInputEvent"] & {
      /** @enum {string} */
      type: "UpdateEllipseNode";
    }) | (components["schemas"]["UpdateStarNodeInputEvent"] & {
      /** @enum {string} */
      type: "UpdateStarNode";
    }) | (components["schemas"]["UpdatePolygonNodeInputEvent"] & {
      /** @enum {string} */
      type: "UpdatePolygonNode";
    }) | (components["schemas"]["UpdateTextNodeInputEvent"] & {
      /** @enum {string} */
      type: "UpdateTextNode";
    }) | (components["schemas"]["UpdateFillStyleInputEvent"] & {
      /** @enum {string} */
      type: "UpdateFillStyle";
    }) | (components["schemas"]["UpdateStorkeStyleInputEvent"] & {
      /** @enum {string} */
      type: "UpdateStrokeStyle";
    }) | (components["schemas"]["UpdateDropShadowStyleInputEvent"] & {
      /** @enum {string} */
      type: "UpdateDropShadowStyle";
    }) | (components["schemas"]["CreatePaintInputEvent"] & {
      /** @enum {string} */
      type: "CreatePaint";
    }) | (components["schemas"]["UpdateSolidPaintInputEvent"] & {
      /** @enum {string} */
      type: "UpdateSolidPaint";
    }) | (components["schemas"]["UpdateImagePaintInputEvent"] & {
      /** @enum {string} */
      type: "UpdateImagePaint";
    }) | (components["schemas"]["UpdateGradientPaintInputEvent"] & {
      /** @enum {string} */
      type: "UpdateGradientPaint";
    }) | (components["schemas"]["CreateAssetInputEvent"] & {
      /** @enum {string} */
      type: "CreateAsset";
    }) | (components["schemas"]["DeleteEntityInputEvent"] & {
      /** @enum {string} */
      type: "DeleteEntity";
    }) | (components["schemas"]["UpdateEntityTransformInputEvent"] & {
      /** @enum {string} */
      type: "UpdateEntityTransform";
    }) | (components["schemas"]["UpdateEntitySizeInputEvent"] & {
      /** @enum {string} */
      type: "UpdateEntitySize";
    }) | (components["schemas"]["MoveEntityInputEvent"] & {
      /** @enum {string} */
      type: "MoveEntity";
    }) | (components["schemas"]["UpdateEntityRotationInputEvent"] & {
      /** @enum {string} */
      type: "UpdateEntityRotation";
    }) | (components["schemas"]["UpdateEntityVisibilityInputEvent"] & {
      /** @enum {string} */
      type: "UpdateEntityVisibility";
    }) | (components["schemas"]["UpdateEntityCornerRadiiInputEvent"] & {
      /** @enum {string} */
      type: "UpdateEntityCornerRadii";
    }) | (components["schemas"]["UpdateEntityBlendModeInputEvent"] & {
      /** @enum {string} */
      type: "UpdateEntityBlendMode";
    }) | (components["schemas"]["UpdateEntityOpacityInputEvent"] & {
      /** @enum {string} */
      type: "UpdateEntityOpacity";
    }) | (components["schemas"]["UpdateEntityChildrenInputEvent"] & {
      /** @enum {string} */
      type: "UpdateEntityChildren";
    }) | (components["schemas"]["RegisterLuaScriptInputEvent"] & {
      /** @enum {string} */
      type: "RegisterLuaScript";
    }) | (components["schemas"]["ExecuteLuaScriptInputEvent"] & {
      /** @enum {string} */
      type: "ExecuteLuaScript";
    });
    CornerRadii: components["schemas"]["Angle"][];
    CreateAssetInputEvent: {
      asset: components["schemas"]["AssetWithId"];
    };
    CreateNodeInputEvent: {
      node: components["schemas"]["Node"];
    };
    CreatePaintInputEvent: {
      paint: components["schemas"]["Paint"];
    };
    DeleteEntityInputEvent: {
      id: components["schemas"]["ReferenceIdOrEntity"];
    };
    DropShadowStyle: {
      blendMode?: components["schemas"]["BlendMode"];
      blur: components["schemas"]["Abs"];
      color?: components["schemas"]["Color"];
      id?: components["schemas"]["ReferenceId"] | null;
      opacity?: components["schemas"]["Opacity"];
      position: components["schemas"]["Vec2"];
      spread?: components["schemas"]["Abs"];
      visible?: boolean;
    };
    /**
     * @description DTIF (Design Tree Interchange Format) utilizes a flat structure for easy readability
     * and efficient access & manipulation of design elements (Nodes, Paints, ..).
     * https://softwareengineering.stackexchange.com/questions/350623/flat-or-nested-json-for-hierarchal-data
     */
    DtifComposition: {
      /** @description A list of assets. */
      assets?: components["schemas"]["AssetWithId"][];
      /** @description A list of input events. */
      events?: components["schemas"]["CoreInputEvent"][];
      /** @description A list of nodes. */
      nodes: components["schemas"]["Node"][];
      /** @description A list of paints. */
      paints?: components["schemas"]["Paint"][];
      /** @description A list of scripts. */
      scripts?: components["schemas"]["LuaScriptWithId"][];
      size: components["schemas"]["Size"];
      version?: components["schemas"]["CompVersion"] | null;
      viewport?: components["schemas"]["Viewport"] | null;
    };
    EllipseNode: {
      blendMode?: components["schemas"]["BlendMode"];
      /** Format: float */
      endingAngle?: number;
      id?: components["schemas"]["ReferenceId"] | null;
      /** Format: float */
      innerRadiusRatio?: number;
      layoutElement?: components["schemas"]["LayoutElement"];
      opacity?: components["schemas"]["Opacity"];
      rotationDeg?: components["schemas"]["Angle"];
      size: components["schemas"]["Size"];
      /** Format: float */
      startingAngle?: number;
      styles?: components["schemas"]["Style"][];
      translation?: components["schemas"]["Vec2"];
      visible?: boolean;
    };
    Em: components["schemas"]["Scalar"];
    /** Format: float */
    Entity: number;
    ErrorCode: string;
    ExecuteLuaScriptInputEvent: {
      argsMap: Record<string, never>;
      id: components["schemas"]["ReferenceId"];
    };
    FillStyle: {
      blendMode?: components["schemas"]["BlendMode"];
      id?: components["schemas"]["ReferenceId"] | null;
      opacity?: components["schemas"]["Opacity"];
      paintId: components["schemas"]["ReferenceIdOrEntity"];
      visible?: boolean;
    };
    /**
     * @description The direction of the flexbox layout main axis.
     *
     * There are always two perpendicular layout axes: main (or primary) and cross (or secondary).
     * Adding items will cause them to be positioned adjacent to each other along the main axis.
     * By varying this value throughout your tree, you can create complex axis-aligned layouts.
     *
     * Items are always aligned relative to the cross axis, and justified relative to the main axis.
     *
     * The default behavior is [`FlexDirection::Row`].
     *
     * [Specification](https://www.w3.org/TR/css-flexbox-1/#flex-direction-property)
     * @enum {string}
     */
    FlexDirection: "Row" | "Column" | "RowReverse" | "ColumnReverse";
    /** @default null */
    FocusRootNodesInputEvent: unknown;
    /** @description A typographic font family. */
    FontFamily: "Serif" | "SansSerif" | "Cursive" | "Fantasy" | "Monospace" | {
      /** @description A custom named font. */
      Named: string;
    };
    /** @description Properties of a single font. */
    FontInfo: {
      family: components["schemas"]["FontFamily"];
      variant: components["schemas"]["FontVariant"];
    };
    /**
     * Format: int32
     * @description The width of a font.
     */
    FontStretch: number;
    /**
     * @description The style of a font.
     * @enum {string}
     */
    FontStyle: "Normal" | "Italic" | "Oblique";
    /**
     * @description A font unit.
     * https://fonts.google.com/knowledge/glossary/unit
     */
    FontUnit: {
      /** @enum {string} */
      type: "Abs";
      value: components["schemas"]["Abs"];
    } | {
      /** @enum {string} */
      type: "Em";
      value: components["schemas"]["Em"];
    };
    /** @description Properties that distinguish a font from other fonts in the same family. */
    FontVariant: {
      stretch: components["schemas"]["FontStretch"];
      style: components["schemas"]["FontStyle"];
      weight: components["schemas"]["FontWeight"];
    };
    /**
     * Format: int32
     * @description The weight of a font.
     */
    FontWeight: number;
    FrameNode: {
      blendMode?: components["schemas"]["BlendMode"];
      children?: components["schemas"]["ReferenceIdOrEntity"][];
      clipContent?: boolean;
      cornerRadii?: components["schemas"]["CornerRadii"];
      id?: components["schemas"]["ReferenceId"] | null;
      layoutElement?: components["schemas"]["LayoutElement"];
      layoutParent?: components["schemas"]["StaticLayoutParent"] | null;
      opacity?: components["schemas"]["Opacity"];
      rotationDeg?: components["schemas"]["Angle"];
      size: components["schemas"]["Size"];
      styles?: components["schemas"]["Style"][];
      translation?: components["schemas"]["Vec2"];
      visible?: boolean;
    };
    GradientColorStop: {
      color: components["schemas"]["Color"];
      opacity?: components["schemas"]["Opacity"];
      position: components["schemas"]["Ratio"];
    };
    GradientPaint: {
      id?: components["schemas"]["ReferenceId"] | null;
      stops: components["schemas"]["GradientColorStop"][];
      variant: components["schemas"]["GradientVariant"];
    };
    GradientVariant: {
      transform?: components["schemas"]["Mat3"];
      /** @enum {string} */
      type: "Linear";
    } | {
      transform?: components["schemas"]["Mat3"];
      /** @enum {string} */
      type: "Radial";
    };
    /** @enum {string} */
    HorizontalTextAlignment: "Start" | "End" | "Left" | "Right" | "Center";
    ImageId: {
      /** Format: int32 */
      idx: number;
      /** Format: int32 */
      version: number;
    };
    ImagePaint: {
      id?: components["schemas"]["ReferenceId"] | null;
      imageId: components["schemas"]["ReferenceIdOrImageId"];
      scaleMode?: components["schemas"]["ImageScaleMode"];
    };
    ImageScaleMode: {
      /** @enum {string} */
      type: "Fill";
    } | {
      /** @enum {string} */
      type: "Fit";
    } | {
      transform?: components["schemas"]["Mat3"];
      /** @enum {string} */
      type: "Crop";
    } | {
      /** Format: float */
      rotation?: number;
      /** Format: float */
      scalingFactor: number;
      /** @enum {string} */
      type: "Tile";
    };
    LayoutElement: (components["schemas"]["AbsoluteLayoutElement"] & {
      /** @enum {string} */
      type: "Absolute";
    }) | (components["schemas"]["StaticLayoutElement"] & {
      /** @enum {string} */
      type: "Static";
    });
    /** @enum {string} */
    LayoutElementSizingMode: "Fixed" | "Fill";
    /** @enum {string} */
    LayoutParentSizingMode: "Fixed" | "Hug";
    Length: {
      /** @enum {string} */
      type: "Abs";
      value: components["schemas"]["Abs"];
    } | {
      /** @enum {string} */
      type: "Ratio";
      value: components["schemas"]["Ratio"];
    };
    /** @enum {string} */
    LineWrap: "None" | "Word";
    LuaScriptWithId: {
      id: components["schemas"]["ReferenceId"];
      source: string[];
    };
    Mat3: number[];
    MoveEntityInputEvent: {
      /** Format: float */
      dx?: number | null;
      /** Format: float */
      dy?: number | null;
      id: components["schemas"]["ReferenceIdOrEntity"];
    };
    Node: (components["schemas"]["FrameNode"] & {
      /** @enum {string} */
      type: "Frame";
    }) | (components["schemas"]["RectangleNode"] & {
      /** @enum {string} */
      type: "Rectangle";
    }) | (components["schemas"]["EllipseNode"] & {
      /** @enum {string} */
      type: "Ellipse";
    }) | (components["schemas"]["StarNode"] & {
      /** @enum {string} */
      type: "Star";
    }) | (components["schemas"]["PolygonNode"] & {
      /** @enum {string} */
      type: "Polygon";
    }) | (components["schemas"]["TextNode"] & {
      /** @enum {string} */
      type: "Text";
    }) | (components["schemas"]["VectorNode"] & {
      /** @enum {string} */
      type: "Vector";
    });
    Opacity: components["schemas"]["Ratio"];
    Paint: (components["schemas"]["SolidPaint"] & {
      /** @enum {string} */
      type: "Solid";
    }) | (components["schemas"]["ImagePaint"] & {
      /** @enum {string} */
      type: "Image";
    }) | (components["schemas"]["GradientPaint"] & {
      /** @enum {string} */
      type: "Gradient";
    });
    PolygonNode: {
      blendMode?: components["schemas"]["BlendMode"];
      id?: components["schemas"]["ReferenceId"] | null;
      layoutElement?: components["schemas"]["LayoutElement"];
      opacity?: components["schemas"]["Opacity"];
      /** Format: int32 */
      pointCount?: number;
      rotationDeg?: components["schemas"]["Angle"];
      size: components["schemas"]["Size"];
      styles?: components["schemas"]["Style"][];
      translation?: components["schemas"]["Vec2"];
      visible?: boolean;
    };
    Ratio: components["schemas"]["Scalar"];
    Rect: {
      /** Format: float */
      bottom: number;
      /** Format: float */
      left: number;
      /** Format: float */
      right: number;
      /** Format: float */
      top: number;
    };
    RectangleNode: {
      blendMode?: components["schemas"]["BlendMode"];
      cornerRadii?: components["schemas"]["CornerRadii"];
      id?: components["schemas"]["ReferenceId"] | null;
      layoutElement?: components["schemas"]["LayoutElement"];
      opacity?: components["schemas"]["Opacity"];
      rotationDeg?: components["schemas"]["Angle"];
      size: components["schemas"]["Size"];
      styles?: components["schemas"]["Style"][];
      translation?: components["schemas"]["Vec2"];
      visible?: boolean;
    };
    ReferenceId: string;
    ReferenceIdOrEntity: {
      entity: components["schemas"]["Entity"];
      /** @enum {string} */
      type: "Entity";
    } | {
      referenceId: components["schemas"]["ReferenceId"];
      /** @enum {string} */
      type: "ReferenceId";
    };
    ReferenceIdOrImageId: {
      imageId: components["schemas"]["ImageId"];
      /** @enum {string} */
      type: "ImageId";
    } | {
      referenceId: components["schemas"]["ReferenceId"];
      /** @enum {string} */
      type: "ReferenceId";
    };
    RegisterLuaScriptInputEvent: {
      script: components["schemas"]["LuaScriptWithId"];
    };
    /**
     * Format: float
     * @description A 32-bit float that implements `Eq`, `Ord` and `Hash`.
     *
     * Panics if it's `NaN` during any of those operations.
     */
    Scalar: number;
    Size: number[];
    SolidPaint: {
      color: components["schemas"]["Color"];
      id?: components["schemas"]["ReferenceId"] | null;
    };
    StarNode: {
      blendMode?: components["schemas"]["BlendMode"];
      id?: components["schemas"]["ReferenceId"] | null;
      /** Format: float */
      innerRadiusRatio?: number;
      layoutElement?: components["schemas"]["LayoutElement"];
      opacity?: components["schemas"]["Opacity"];
      /** Format: int32 */
      pointCount?: number;
      rotationDeg?: components["schemas"]["Angle"];
      size: components["schemas"]["Size"];
      styles?: components["schemas"]["Style"][];
      translation?: components["schemas"]["Vec2"];
      visible?: boolean;
    };
    StaticLayoutElement: {
      alignSelf?: components["schemas"]["AlignItems"] | null;
      horizontalSizingMode?: components["schemas"]["LayoutElementSizingMode"];
      justifySelf?: components["schemas"]["AlignItems"] | null;
      margin?: components["schemas"]["Rect"];
      verticalSizingMode?: components["schemas"]["LayoutElementSizingMode"];
    };
    StaticLayoutParent: {
      alignItems?: components["schemas"]["AlignItems"] | null;
      flexDirection?: components["schemas"]["FlexDirection"];
      gap?: components["schemas"]["Axes"];
      horizontalSizingMode?: components["schemas"]["LayoutParentSizingMode"];
      justifyContent?: components["schemas"]["AlignContent"] | null;
      padding?: components["schemas"]["Rect"];
      verticalSizingMode?: components["schemas"]["LayoutParentSizingMode"];
    };
    StrokeStyle: {
      blendMode?: components["schemas"]["BlendMode"];
      id?: components["schemas"]["ReferenceId"] | null;
      opacity?: components["schemas"]["Opacity"];
      paintId: components["schemas"]["ReferenceIdOrEntity"];
      visible?: boolean;
      width: components["schemas"]["Abs"];
    };
    Style: (components["schemas"]["FillStyle"] & {
      /** @enum {string} */
      type: "Fill";
    }) | (components["schemas"]["StrokeStyle"] & {
      /** @enum {string} */
      type: "Stroke";
    }) | (components["schemas"]["DropShadowStyle"] & {
      /** @enum {string} */
      type: "DropShadow";
    });
    TextAttributeInterval: {
      attributes: components["schemas"]["TextAttributes"];
      end: number;
      start: number;
    };
    TextAttributes: {
      applyKerning?: boolean | null;
      fontFamily?: components["schemas"]["FontFamily"] | null;
      fontSize?: components["schemas"]["Abs"] | null;
      fontStretch?: components["schemas"]["FontStretch"] | null;
      fontStyle?: components["schemas"]["FontStyle"] | null;
      fontWeight?: components["schemas"]["FontWeight"] | null;
      letterSpacing?: ({
        type: "TextAttributes";
      } & Omit<components["schemas"]["FontUnit"], "type">) | null;
      lineHeight?: ({
        type: "TextAttributes";
      } & Omit<components["schemas"]["FontUnit"], "type">) | null;
      smallCaps?: boolean | null;
      wordSpacing?: ({
        type: "TextAttributes";
      } & Omit<components["schemas"]["FontUnit"], "type">) | null;
    };
    TextNode: {
      attributes: components["schemas"]["TextAttributeInterval"][];
      blendMode?: components["schemas"]["BlendMode"];
      horizontalTextAlignment?: components["schemas"]["HorizontalTextAlignment"];
      id?: components["schemas"]["ReferenceId"] | null;
      layoutElement?: components["schemas"]["LayoutElement"];
      lineWrap?: components["schemas"]["LineWrap"];
      opacity?: components["schemas"]["Opacity"];
      rotationDeg?: components["schemas"]["Angle"];
      size: components["schemas"]["Size"];
      sizingMode?: components["schemas"]["TextSizingMode"];
      styles?: components["schemas"]["Style"][];
      text: string;
      translation?: components["schemas"]["Vec2"];
      verticalTextAlignment?: components["schemas"]["VerticalTextAlignment"];
      visible?: boolean;
    };
    /** @enum {string} */
    TextSizingMode: "WidthAndHeight" | "Height" | "Fixed";
    UpdateCompositionSizeInputEvent: {
      size: components["schemas"]["Size"];
    };
    UpdateCompositionViewportInputEvent: {
      viewport: components["schemas"]["Viewport"];
    };
    UpdateDropShadowStyleInputEvent: {
      blur?: components["schemas"]["Abs"] | null;
      color?: components["schemas"]["Color"] | null;
      id: components["schemas"]["ReferenceIdOrEntity"];
      position?: components["schemas"]["Vec2"] | null;
      spread?: components["schemas"]["Abs"] | null;
    };
    UpdateEllipseNodeInputEvent: {
      /** Format: float */
      endingAngle?: number | null;
      id: components["schemas"]["ReferenceIdOrEntity"];
      /** Format: float */
      innerRadiusRatio?: number | null;
      /** Format: float */
      startingAngle?: number | null;
    };
    UpdateEntityBlendModeInputEvent: {
      blendMode: components["schemas"]["BlendMode"];
      id: components["schemas"]["ReferenceIdOrEntity"];
    };
    UpdateEntityChildrenInputEvent: {
      children: components["schemas"]["ReferenceIdOrEntity"][];
      id: components["schemas"]["ReferenceIdOrEntity"];
    };
    UpdateEntityCornerRadiiInputEvent: {
      cornerRadii: components["schemas"]["CornerRadii"];
      id: components["schemas"]["ReferenceIdOrEntity"];
    };
    UpdateEntityOpacityInputEvent: {
      id: components["schemas"]["ReferenceIdOrEntity"];
      opacity: components["schemas"]["Opacity"];
    };
    UpdateEntityRotationInputEvent: {
      id: components["schemas"]["ReferenceIdOrEntity"];
      rotationDeg: components["schemas"]["Angle"];
    };
    UpdateEntitySizeInputEvent: {
      id: components["schemas"]["ReferenceIdOrEntity"];
      size: components["schemas"]["Size"];
    };
    UpdateEntityTransformInputEvent: {
      id: components["schemas"]["ReferenceIdOrEntity"];
      rotationDeg?: components["schemas"]["Angle"] | null;
      /** Format: float */
      x?: number | null;
      /** Format: float */
      y?: number | null;
    };
    UpdateEntityVisibilityInputEvent: {
      id: components["schemas"]["ReferenceIdOrEntity"];
      visible: boolean;
    };
    UpdateFillStyleInputEvent: {
      id: components["schemas"]["ReferenceIdOrEntity"];
      paintId?: ({
        type: "UpdateFillStyleInputEvent";
      } & Omit<components["schemas"]["ReferenceIdOrEntity"], "type">) | null;
    };
    UpdateFrameNodeInputEvent: {
      clipContent?: boolean | null;
      id: components["schemas"]["ReferenceIdOrEntity"];
    };
    UpdateGradientPaintInputEvent: {
      id: components["schemas"]["ReferenceIdOrEntity"];
      stops?: components["schemas"]["GradientColorStop"][] | null;
      variant?: ({
        type: "UpdateGradientPaintInputEvent";
      } & Omit<components["schemas"]["GradientVariant"], "type">) | null;
    };
    UpdateImagePaintInputEvent: {
      id: components["schemas"]["ReferenceIdOrEntity"];
      imageId?: components["schemas"]["ImageId"] | null;
      scaleMode?: ({
        type: "UpdateImagePaintInputEvent";
      } & Omit<components["schemas"]["ImageScaleMode"], "type">) | null;
    };
    UpdatePolygonNodeInputEvent: {
      id: components["schemas"]["ReferenceIdOrEntity"];
      /** Format: int32 */
      pointCount?: number | null;
    };
    UpdateSolidPaintInputEvent: {
      color?: components["schemas"]["Color"];
      id: components["schemas"]["ReferenceIdOrEntity"];
    };
    UpdateStarNodeInputEvent: {
      id: components["schemas"]["ReferenceIdOrEntity"];
      /** Format: float */
      innerRadiusRatio?: number | null;
      /** Format: int32 */
      pointCount?: number | null;
    };
    UpdateStorkeStyleInputEvent: {
      id: components["schemas"]["ReferenceIdOrEntity"];
      paintId?: ({
        type: "UpdateStorkeStyleInputEvent";
      } & Omit<components["schemas"]["ReferenceIdOrEntity"], "type">) | null;
      width?: components["schemas"]["Abs"] | null;
    };
    UpdateTextNodeInputEvent: {
      attributes?: components["schemas"]["TextAttributeInterval"][] | null;
      horizontalTextAlignment?: components["schemas"]["HorizontalTextAlignment"] | null;
      id: components["schemas"]["ReferenceIdOrEntity"];
      lineWrap?: components["schemas"]["LineWrap"] | null;
      sizingMode?: components["schemas"]["TextSizingMode"] | null;
      text?: string | null;
      verticalTextAlignment?: components["schemas"]["VerticalTextAlignment"] | null;
    };
    Vec2: number[];
    VectorNode: {
      blendMode?: components["schemas"]["BlendMode"];
      id?: components["schemas"]["ReferenceId"] | null;
      layoutElement?: components["schemas"]["LayoutElement"];
      opacity?: components["schemas"]["Opacity"];
      path: string;
      rotationDeg?: components["schemas"]["Angle"];
      size: components["schemas"]["Size"];
      styles?: components["schemas"]["Style"][];
      translation?: components["schemas"]["Vec2"];
      visible?: boolean;
      windingRule: components["schemas"]["WindingRule"];
    };
    /** @enum {string} */
    VerticalTextAlignment: "Top" | "Bottom" | "Center";
    Viewport: {
      physicalPosition: components["schemas"]["Vec2"];
      physicalSize: components["schemas"]["Size"];
    };
    /** @enum {string} */
    WindingRule: "Nonzero" | "Evenodd";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  render_composition: {
    parameters: {
      path: {
        format: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DtifComposition"] | null;
      };
    };
    responses: {
      /** @description Generation success */
      200: {
        content: {
          "application/json": components["schemas"]["DtifComposition"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["AppError"];
        };
      };
    };
  };
}
